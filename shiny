2.2.1
All input functions have the same first argument: inputId. This is the identifier used to connect the front end with the back end: if your UI has an input with ID "name", the server function will access it with input$name.

The inputId has two constraints:
(i) It must be a simple string that contains only letters, numbers, and underscores (no space, dashes, periods, or other special characters allowed). Name it like you would name a variable in R.
(ii) It must be unique. If it's not unique, you'll have no way to refer to this control in your server function.

Most input functions has a second parameter called label. This is used to create a human-readable label for the control. Shiny doesn't place any restrictions on this string, but you'll need to carefully think about it to make sure that your app is usable by humans. The third parameter is typically value, which, where possible, lets you set the default value. The remaining parameters are unique to the control.

When creating an input, use arguments like this.
> silderInput("min", "Limit (minimum)", value = 50, min = 0, max = 100)
 
2.2.2 Free text
Collect small amounts of text with textInput(), passwords with passwordInput(),and paragraphs of text with textAreaInput(). Use validate() to ensure the text has certain properties.
> ui <- fluidPage(
    textInput("name","What's your name?"),
    passwordInput("password", "What's your password?"),
    textAreaInput("story", "Tell me about yourself", rows = 3)  
)

2.2.3 Numeric inputs
To collect numeric values, create a constrained text box with numericInput() or a slider with sliderInput(). If you supply a length-2 numeric vector for the default value of sliderInput(), you get a "range" value slider with two ends.
> ui <- fluidPage(
    numericInput("num","NUMBER ONE", value = 0, min = 0, max = 100),
    sliderInput("num2", "NUMBER TWO", value = 50, min = 0, max = 100),
    sliderInput("rng", "	Range", value = c(10,20), min = 0, max = 100)  
)

2.2.4 Dates

2.2.5 Limited choices
There are two different approaches to allow the user to choose from a respecified set of options: selectInput() and radioButtons().
> animals <- c("dog", "cat", "mouse", "bird", "other", "I hate animals")
> ui <- fluidPage(
     selectInput("state", "What's your favourite state?", state.name),
     radioButtons("animals", "What's your favorite animal?", animals)
)

Radio buttons have two nice features: they show all possible options, making them suitable for short lists, and via the choiceNames/choiceValues arguments, they can display options other than plain text. choiceNames determines what is shown to the user; choiceValues determines what is returned in your server function.
> ui <- fluidPage(
    radioButtons("rb", "Choose one:"),
       choiceNames = list(
          icon("angry"),
          icon("smile"),
          icon("sad-tear")
       ),
       choiceValues = list("angry", "happy", "sad")
     )
)

Dropdowns created with selectInput() take up the same amount of space, regardless of the number of options, making them more suitable for longer options. You can also set multiple = TRUE to allow the user to select multiple elements.
> ui <- fluidPage(
    selectInput(
       "state", "What's your favorite state?", state.name,
       Multiple = TRUE
    )
)

There's no way to select multiple values with radio buttons, but there's an alternative that's conceptually similar: checkboxGroupInput().
> ui <- fluidPage(
    checkboxGroupInput("animal", "What animals do you like?", animals)
)

2.2.6 File uploads
Allow the user to upload a file with fileInput():
> ui <- fluidPage(
    fileInput("upload", NULL)
)

2.2.7 Action buttons
Let the user perform an action with actionButton() or actionLink():
> ui <- fluidPage(
    actionButton("click", "Click me!"),
    actionButton("drink", "Drink me!", icon = icon("cocktail"))
)
Actions links and buttons are most naturally paired with observeEvent() or eventReactive() in your server function.
You can customize the appearance using the class argument by using one of "bin-primary", "bin-success", "bin-info", "btn-warning", or "ban-danger". You can also change the size with "btn-lg", "btn-sm", "ban-xs". Finally, you can make buttons span the entire width of the element they are embedded within using "bin-block".
> ui <- fluidPage(
    fluidRow(
       actionButton("click", "click me!", class = "btn-danger"),
       actionButton("click", "drink me!", class = "btn-lg ban-success"),
),
    fluidRow(
       actionButton("eat", "eat me!", class = "btn-block")
    )
)
The class argument works by setting the class attribute of the underlying HTML, which affects how the element is styled.

2.3 Outputs
Outputs in the UI create placeholders that are later filled by the server function. Like inputs, outputs take a unique ID as their first argument: if your UI specification creates as output with ID "plot", you'll access it in the server function with output$plot.

Each output function on the front end is coupled with a render function in the back end. There are three main types of output, corresponding to the three things you usually include in a report: text, tables, and plots.

2.3.1 Text
Output regular text with textOutput() and fixed code and console output with verbatimTextOutput()

> ui <- fluidPage(
    textOutput("text"),
    verbatimTextOutput("code")
)
> server <- function(input, output, session){
    output$text <- renderText({
       "Hello friend!"
    })
    output$code <- renderPrint({
       summary(1:10)
    })
}
Note that the {} are only required in render functions if need to run multiple lines of code. Should do as little computation in your render functions as possible, which means you can often omit them. Here's what the server function above would look like I written more compactly:
> server <- function(input, output, session){
   output$text <- renderText("hello friend!")
   output$code <- renderPrint(summary(1:10))
}
Note that there two render functions which behave slightly differently:
(i) renderText() combines the result into a single string, and is usually paired with textOutput()
(ii) renderPrint() prints the result, as if you were in an R console, and is usually paired with verbatimTextOutput()
See the difference as the app below:
> ui <- fluidPage(
    textOutput("text"),
    verbatimTextOutput("print")
)
> server <- function(input, output, session){
    output$text <- renderText("hello!")
    output$print <- renderPrint("hello!")
}
This is equivalent to the difference between cat() and print() in base R.

2.3.2 Tables
There are two options for displaying data frames in tables:
(i) tableOutput() and renderTable() render a static table of data, showing all the data at once
(ii) dataTableOutput() and renderDataTable() render a dynamic table, showing a fixed number of rows along with controls to change which rows are visible
tableOutput() is most useful for small, fixed summaries (e.g. model coefficients); dataTableOutput() is most appropriate if you want to expose a complete data frame to the user.  
> ui <- fluidPage(
    tableOutput("static"),
    dataTableOutput("dynamic")
)
> server <- function(input, output, session) {
     output$static <- renderTable(head(mtcars))
     output$dynamic <- renderDataTable(mtcars, options = list(pageLength = 5))
}

2.3.3 Plots
You can display any type of R graphic(base, ggplot2, o otherwise) with plotOutput() and renderPlot()


2.3.3 Plots
You can display any type of R graphic(base, ggplot2, o otherwise) with plotOutput() and renderPlot()
> ui <- fluidpage(
      plotOutput("plot", width = "400px")
)
> server <- function(input, output, session){
      output$plot <- renderPlot(plot(1:5),res=96)
}

By default, plotOutput() will take up the full width of its container, and will be 400 pixels high. You can override these defaults with the height and width arguments. We recommend always setting res = 96 as that will make the shiny plots match what you see in RStudio as closely as possible.

Plots are special because they are outputs that can also act as inputs. plotOutput() has a number of arguments like click = "plot_click", they'll create a reactive input (input$plot_click) that you can use to handle user interaction on the plot, e.g. clicking on the plot.

2.3.4 Downloads
You can let the user download a file with downloadButton() or downloadLink(). 

3 Basic reactivity
Just like any other R function, when the server function is called it creates a new local environment that is independent of every other invocation of the function. This allows each session to have a unique state, as well as isolating the variables created inside the function.

3.2.1 Input
The input argument is a list-like object that contains all the input data sent from the browser, named according to the input ID. For example, if your UI contains a numeric input control with an input ID of count:

> ui <- fluidPage(
    numericInput("count", label = "Number of values", value = 100)
)

Then you can access the value of that input with input$count. It will initially contain the value 100, and it will be automatically updated as the user changes the value in the browser.
Unlike a typical list, input objects are read-only. If you attempt to modify an input inside the server function, you'll get an error.
> server <- function(input, output, session){
    input$count <- 10
}
#> Error: cannot modify read-only reactive value 'count'

This error occurs because input reflects what's happening in the browser, and the browser is shiny's "single source of truth". If you could modify the value in R, you could introduce inconsistencies, where the input slider said one thing in the browser, and input$count said something different in R. That would make programming challenging! Functions like updateNumericInput() can modify the value in the browser, and then input$count will update accordingly.

One more important thing about input:it's selective about who is allowed to read it. To read from an input, you must be in a reactive context created by a function like renderText() or reactive(). It's an important constant that allows outputs to automatically update when an input changes. This code illustrates the error if make this mistake:

> server <- function(input, output, session){
    message("The value of input$count is", input$count)
}
> shinyApp(ui, server)
#> Error: cannot access reactive value 'count' outside of reactive consumer

3.2.2 Output
Output is very similar to input: it's also a list-like object named according to the output ID. The main difference is that you use the output object in concert with a render function, as in the following simple example: (note that the ID is quoted in the UI, but not in the server)

> ui <- fluidPage(
    textOutput("greeting")
)
> server <- function(input, output, session){
    output$greeting <- renderText("Hello human!")
}

The render function does two things:
It sets up a special reactive context that automatically tracks what inputs the output uses.
It converts the output of your R code into HTML suitable for display on a web page.
Like the inout, the output is picky about how you use it, you'll get an error if forget the render function.

3.3 Reactive programming
An app is going to be pretty boring if it only has inputs or only has outputs. The real magic of shiny happens when you have an app with both. The greeting updates automatically as you type.

> ui <- fluidPage(
   textInput("name", "What's your name?")
   textOutput("greeting")
)
> server <- function(input, output, session){
   output$greeting <- renderText({
      paste0("Hello", input$name, "!")
   })
}

This is the big idea in shiny: you don't need to tell an output when to update, because shiny automatically figures it out for you.

The app works because the code doesn't tell shiny to create the string and send it to the browser, but instead, it informs shiny how it could create the string if it needs to.

3.3.1 Imperative vs declarative programming
This difference between commands and recipes is one of the key differences between two important styles of programming:
In imperative programming, you issue a specific command and it's carried out immediately. This is the type of programming you're used to in your analysis scripts: you command R to load your data, transform it, visualse it, and save the results to disk.
In declarative programming, you express higher-level goals or describe important constraints, and rely on someone else to decide how and/or when to translate that into action. This is the style of programming you use in shiny.

3.3.2 Laziness
One of the strengths of declarative programming in shiny is that it allows apps to be extremely lazy.  
A shiny app will only ever do the minimal amount of work needed to update the output controls that you can currently see. This laziness, however, comes with an important downside that you should be aware of. 
If you are working on a shiny app and you just can't figure out why your code never gets run, double check that your UI and server functions are using the same identifiers.

3.3.3 The reactive graph
Shiny's laziness has another important property. In most r code, you can understand the order of execution by reading the code from top to bottom. That doesn't work in shiny, because code is only run when needed. To understand the order of execution you need to instead look at the reactive graph, which describes how inputs and outputs are connected. The reactive graph for the app above is very simple and shown here: name -> greeting

The reactive graph contains one symbol for every input and output, and we connect an input to an output whenever the output accesses the input. This graph tells you that greeting will need to be recomputed whenever name is changed. We'll often describe this relationship as greeting has a reactive dependency on name.

The reactive graph is a powerful tool for understanding how you app works. As your app gets more complicated, it's often useful to make a quick high-level sketch of the reactive graph to remind you how all the pieces felt together.

3.3.4 Reactive expressions
There's one more important component that you'll see in the reactive graph: the reactive expression. For now think of them as a tool that reduces duplication in your reactive code by introducing additional nodes into the reactive graph. name -> string -> greeting
Reactive expressions take inputs and produce outputs so they have a shape that combines features of both inputs and outputs.

3.3.5 Execution order
It's important to understand that the order your code run is solely determined by the reactive graph. This is different from most r code where the execution order is determined by the order of lines.

3.4 Reactive expressions
Reaction expressions have a flavor of both inputs and outputs:
Like inputs, you can use the results of a reactive expression in an output.
Like outputs, reactive expressions depend on inputs and automatically know when they need updating.
This duality means we need some new vocabulary: I'll use producers to refer to reactive inputs and expressions, and consumers to refer to reactive expressions and outputs.

3.4.1 The motivation

